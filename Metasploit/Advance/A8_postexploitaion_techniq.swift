//
//  A8_postexploitaion_techniq.swift
//  Metasploit
//
//  Created by Akshay Bhasme on 02/06/24.
//

import SwiftUI

struct A8_postexploitaion_techniq: View {
    
    let g1 = """
    POST-EXPLOITATION TECHNIQUES: EXAMINING METHODS FOR MAINTAINING ACCESS AND ESCALATING PRIVILEGES AFTER A SUCCESSFUL COMPROMISE.
    """
    
    let g2 = """
    Post-exploitation techniques are critical after a successful compromise, as they allow security professionals to maintain access to the compromised system and escalate privileges to gain deeper control and access. Here are some common post-exploitation techniques used to maintain access and escalate privileges:
    """
    
    let g3 = """
    1. Persistence:
    """
    
    let g4 = """
    Persistence techniques ensure that the attacker\'s access to the compromised system remains even after a system reboot. Some common persistence techniques include modifying startup scripts, creating hidden user accounts, or installing rootkits.
    """
    
    let g5 = """
    2. Privilege Escalation:
    """
    
    let g6 = """
    Privilege escalation involves gaining higher privileges on the compromised system, enabling access to sensitive resources and administrative functions. This can be achieved by exploiting misconfigurations, vulnerable software, or weak access control mechanisms.
    """
    
    let g7 = """
    3. Lateral Movement:
    """
    
    let g8 = """
    Lateral movement refers to the technique of moving through a network from one compromised system to another. It allows attackers to expand their reach and compromise additional systems within the network. Common methods for lateral movement include using stolen credentials, exploiting trust relationships, or leveraging vulnerabilities in network services.
    """
    
    let g9 = """
    4. Data Exfiltration:
    """
    
    let g10 = """
    Data exfiltration involves stealing or transferring sensitive data from the compromised system to an external location controlled by the attacker. Various techniques, such as file transfer protocols, covert channels, or using legitimate communication channels, can be employed for data exfiltration.
    """
    
    let g11 = """
    5. Privilege Escalation Exploits:
    """
    
    let g12 = """
    Metasploit and other tools provide modules and exploits specifically designed to escalate privileges on compromised systems. These exploits target vulnerabilities in operating systems, applications, or misconfigurations that allow for privilege escalation.
    """
    
    let g13 = """
    6. Password Cracking:
    """
    
    let g14 = """
    If access to user credentials is obtained, password cracking techniques can be used to uncover weak or plaintext passwords. Tools like John the Ripper or Hashcat can be used to crack hashed passwords retrieved from the compromised system.
    """
    
    let g15 = """
    7. Pivoting:
    """
    
    let g16 = """
    Pivoting involves using the compromised system as a stepping stone to access other systems within the network that may be otherwise inaccessible. Attackers can set up port forwarding or tunneling techniques to route traffic through the compromised system to gain access to internal network resources.
    """
    
    let g17 = """
    8. Covering Tracks:
    """
    
    let g18 = """
    Covering tracks involves removing or altering evidence of the attacker\'s presence on the compromised system. This includes deleting log files, modifying timestamps, and ensuring that system activities do not raise suspicion.
    """
    
    let g19 = """
    It\'s crucial to note that these techniques should only be employed legally and ethically, within authorized penetration testing engagements or for defensive purposes. Always prioritize responsible disclosure and adhere to legal and ethical guidelines when performing post-exploitation activities.
    """
    
    var body: some View {
        ZStack {
            // Background color or other background elements
            Color("bg").ignoresSafeArea()

            VStack(spacing: 0) {
                ScrollView {
                    VStack(alignment: .leading, spacing: 15) {
                        
                        
                        
                        
                        
                        Head(title: g1)
                        
                        Stext(title: g2)
                        
                        Text2(title1: g3, title2: g4)
                        
                        Text2(title1: g5, title2: g6)
                        
                        Text2(title1: g7, title2: g8)
                        
                        Text2(title1: g9, title2: g10)
                        
                        Text2(title1: g11, title2: g12)
                        
                        Text2(title1: g13, title2: g14)
                        
                        Text2(title1: g15, title2: g16)
                        
                        Text2(title1: g17, title2: g18)
                        
                        Stext(title: g19)
                        
                        
                        
                        
                        
                        
                    }
                    .padding()
                }
                
                Spacer()
                
                // Adjust the height of the banner as needed
                BannerAds()
            }
        }
        
    }
}

#Preview {
    A8_postexploitaion_techniq()
}
